{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","Calculadora.service.js","Calculadora.js","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","Input","input","ClearButton","CalculadoraService","numero1","numero2","operacao","resultado","numAtual","numConcat","indexOf","Calculadora","calcular","concatenarNumero","SOMA","SUBTRACAO","DIVISAO","MULTIPLICACAO","useState","txtNumeros","setTxtNumeros","setNumero1","setNumero2","setOperacao","adicionarNumero","numero","definirOperacao","op","parseFloat","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.129fe045.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nconst isOperator = val => {\n    return !isNaN(val) || val === '.' || val === '='\n}\n\nconst Button = props => {\n    return (\n        <div className={`button-wrapper ${isOperator(props.children) ? \n            null : 'operator'\n        }`} onClick={props.onClick}>{props.children}\n        </div>\n    )\n}\n\nexport default Button","import React from 'react'\nimport './Input.css'\n\nconst Input = props => <div className='input'>{props.input}</div>\n\nexport default Input","import React from 'react'\nimport './ClearButton.css'\n\nconst ClearButton = props => {\n    return(\n        <div className='clear-btn' onClick={props.onClick}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default ClearButton","function CalculadoraService() {\n    const SOMA = '+'\n    const SUBTRACAO = '-'\n    const DIVISAO = '/'\n    const MULTIPLICACAO = '*'\n\n    function calcular(numero1, numero2, operacao) {\n        let resultado\n\n        switch (operacao) {\n            case SOMA: \n                resultado = numero1 + numero2\n                break\n            case SUBTRACAO:\n                resultado = numero1 - numero2\n                break\n            case DIVISAO:\n                resultado = numero1 / numero2\n                break\n            case MULTIPLICACAO:\n                resultado = numero1 * numero2\n                break\n            default:\n                resultado = 0\n        }\n        return resultado \n    }\n\n    function concatenarNumero(numAtual, numConcat) {\n        // caso tenha apenas '0' ou null, reinicia o valor\n        if (numAtual === '0' || numAtual === null) {\n            numAtual = ''\n        }\n\n        // primeiro digito for '.', concatena '0' antes do ponto\n        if (numConcat === '.' && numAtual === '.') {\n            return '0.'\n        }\n\n        // caso '.' digitado e já contenha um ponto, apenas retornar \n        if (numConcat === '.' && numAtual.indexOf('.') > -1) {\n            return numAtual\n        }\n\n        return numAtual + numConcat\n\n    }\n\n    return [\n        calcular,\n        concatenarNumero,\n        SOMA,\n        SUBTRACAO,\n        DIVISAO,\n        MULTIPLICACAO\n    ]\n}\n\nexport default CalculadoraService","import React, { useState } from 'react';\nimport './Calculadora.css';\nimport Button from './components/Button'\nimport Input from './components/Input'\nimport ClearButton from './components/ClearButton';\nimport CalculadoraService from './Calculadora.service'\n\nfunction Calculadora() {\n  const [calcular, concatenarNumero, SOMA, SUBTRACAO, DIVISAO, MULTIPLICACAO] = CalculadoraService()\n  \n  const [txtNumeros, setTxtNumeros] = useState('0')\n  const [numero1, setNumero1] = useState('0')\n  const [numero2, setNumero2] = useState(null)\n  const [operacao, setOperacao] = useState(null)\n\n  function adicionarNumero(numero) {\n    let resultado\n    if (operacao === null) {\n      resultado = concatenarNumero(numero1, numero)\n      setNumero1(resultado)\n    } else {\n      resultado = concatenarNumero(numero2, numero)\n      setNumero2(resultado)\n    }\n    setTxtNumeros(resultado)\n  }\n\n  function definirOperacao(op) {\n    // apenas define a operação caso ela não exista\n    if (operacao === null){\n      setOperacao(op)\n      return \n    }\n    //caso operação estiver defnida e número 2 selecionado, realiza o cálculo da operação\n    if (numero2 !== null) {\n      const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao)\n      setOperacao(op)\n      setNumero1(resultado.toString())\n      setNumero2(null)\n      setTxtNumeros(resultado.toString())\n    }\n  }\n\n  function acaoCalcular() {\n    if (numero2 === null) {\n      return\n    }\n    const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao)\n    setTxtNumeros(resultado)\n  }\n\n  function limpar() {\n    setTxtNumeros('0')\n    setNumero1('0')\n    setNumero2(null)\n    setOperacao(null)\n  }\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"calc-wrapper\">\n        <Input input={txtNumeros}></Input>\n        <div className='row'>\n          <Button onClick={() => adicionarNumero('7')}>7</Button>\n          <Button onClick={() => adicionarNumero('8')}>8</Button>\n          <Button onClick={() => adicionarNumero('9')}>9</Button>\n          <Button onClick={() => definirOperacao(DIVISAO)}>/</Button>\n        </div>\n        <div className='row'>\n          <Button onClick={() => adicionarNumero('4')}>4</Button>\n          <Button onClick={() => adicionarNumero('5')}>5</Button>\n          <Button onClick={() => adicionarNumero('6')}>6</Button>\n          <Button onClick={() => definirOperacao(MULTIPLICACAO)}>X</Button>\n        </div>\n        <div className='row'>\n          <Button onClick={() => adicionarNumero('1')}>1</Button>\n          <Button onClick={() => adicionarNumero('2')}>2</Button>\n          <Button onClick={() => adicionarNumero('3')}>3</Button>\n          <Button onClick={() => definirOperacao(SOMA)}>+</Button>\n        </div>\n        <div className='row'>\n          <Button onClick={() => adicionarNumero('.')}>.</Button>\n          <Button onClick={() => adicionarNumero('0')}>0</Button>\n          <Button onClick={acaoCalcular}>=</Button>\n          <Button onClick={() => definirOperacao (SUBTRACAO)}>-</Button>\n        </div>\n        <div className='row'>\n          <ClearButton onClick={limpar}>Apagar</ClearButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculadora;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculadora from './Calculadora';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculadora />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}